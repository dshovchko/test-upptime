name: SSL and Domain Check

on:
  schedule:
    - cron: "0 12 * * *" # daily at 12:00 UTC
  workflow_dispatch:

jobs:
  ssl-domain-check:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check SSL Certificate and Domain
        run: |
          # Define reusable functions
          create_or_update_issue() {
            local label="$1"
            local title="$2"
            local body="$3"
            local search_term="$4"
            
            existing_issue=$(gh issue list --label "$label" --state "open" --search "$search_term" --json number --jq '.[0].number' || echo "")
            
            if [ -z "$existing_issue" ]; then
              echo "Creating new $label issue..."
              gh issue create --title "$title" --body "$body" --label "$label" --label monitoring --label urgent
            else
              echo "$label issue already exists (#$existing_issue), updating..."
              gh issue edit "$existing_issue" --body "$body"
            fi
          }
          
          close_issue_if_exists() {
            local label="$1"
            local search_term="$2"
            local comment="$3"
            
            existing_issue=$(gh issue list --label "$label" --state "open" --search "$search_term" --json number --jq '.[0].number' || echo "")
            if [ -n "$existing_issue" ]; then
              echo "Closing resolved $label issue #$existing_issue"
              gh issue close "$existing_issue" --comment "$comment"
            fi
          }
          
          # Track overall status
          overall_status=0
          
          # Check SSL Certificate
          echo "Checking SSL certificate for esl-ui.com..."
          
          # Check SSL certificate
          ssl_info=$(echo | openssl s_client -servername esl-ui.com -connect esl-ui.com:443 2>/dev/null | openssl x509 -noout -dates)
          echo "SSL Certificate info:"
          echo "$ssl_info"
          
          # Get expiry date
          expiry_date=$(echo "$ssl_info" | grep "notAfter" | cut -d= -f2)
          expiry_timestamp=$(date -d "$expiry_date" +%s 2>/dev/null)
          current_timestamp=$(date +%s)
          
          # Check if expiry_timestamp is a valid integer
          if ! [[ "$expiry_timestamp" =~ ^[0-9]+$ ]]; then
            echo "❌ Error: Could not parse SSL certificate expiry date for esl-ui.com."
            echo "Raw openssl output:"
            echo "$ssl_info"
            echo "Parsed expiry_date: '$expiry_date'"
            overall_status=2
          else
            days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
            
            echo "Days until SSL expiry: $days_until_expiry"
            
            if [ $days_until_expiry -lt 30 ]; then
              echo "⚠️ SSL certificate expires in $days_until_expiry days!"
              
              create_or_update_issue "ssl" \
                "⚠️ SSL Certificate Expiring Soon: esl-ui.com" \
                "SSL certificate for esl-ui.com expires in **$days_until_expiry days** (on $expiry_date).\n\nPlease renew the certificate before expiration.\n\n*Updated: $(date)*" \
                "SSL Certificate Expiring Soon"
              
              overall_status=1
            else
              echo "✅ SSL certificate is valid for $days_until_expiry more days"
              
              close_issue_if_exists "ssl" \
                "SSL Certificate Expiring Soon" \
                "✅ SSL certificate is now valid for $days_until_expiry more days. Issue resolved."
            fi
          fi

          
          # Check Domain Expiry
          echo ""
          echo "Checking domain expiry for esl-ui.com..."
          
          # Run whois once and reuse output
          full_whois=$(whois esl-ui.com)
          domain_info=$(echo "$full_whois" | grep -i "expir")
          echo "Domain expiry info:"
          echo "$domain_info"
          
          # Try to get domain expiry date
          expiry_line=$(echo "$full_whois" | grep -i "registry expiry date" | head -1)
          if [ -n "$expiry_line" ]; then
            expiry_date=$(echo "$expiry_line" | cut -d: -f2- | xargs)
            echo "Domain expires: $expiry_date"
            
            # Convert to timestamp (may need adaptation depending on format)
            expiry_timestamp=$(date -d "$expiry_date" +%s 2>/dev/null)
            
            # Check if expiry_timestamp is a valid integer
            if [[ "$expiry_timestamp" =~ ^[0-9]+$ ]]; then
              current_timestamp=$(date +%s)
              days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
              
              echo "Days until domain expiry: $days_until_expiry"
              
              if [ $days_until_expiry -lt 60 ]; then
                echo "⚠️ Domain expires in $days_until_expiry days!"
                
                create_or_update_issue "domain" \
                  "⚠️ Domain Expiring Soon: esl-ui.com" \
                  "Domain esl-ui.com expires in **$days_until_expiry days** (on $expiry_date).\n\nPlease renew the domain before expiration.\n\n*Updated: $(date)*" \
                  "Domain Expiring Soon"
                
                overall_status=1
              else
                echo "✅ Domain is valid for $days_until_expiry more days"
                
                close_issue_if_exists "domain" \
                  "Domain Expiring Soon" \
                  "✅ Domain is now valid for $days_until_expiry more days. Issue resolved."
              fi
            fi
          else
            echo "Could not determine domain expiry date"
          fi
          
          # Exit with aggregated status
          exit $overall_status